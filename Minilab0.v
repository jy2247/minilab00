
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Minilab0(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output	reg	     [6:0]		HEX0,
	output	reg	     [6:0]		HEX1,
	output	reg	     [6:0]		HEX2,
	output	reg	     [6:0]		HEX3,
	output	reg	     [6:0]		HEX4,
	output	reg	     [6:0]		HEX5,
	
	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW
);

localparam DATA_WIDTH = 8;
localparam DEPTH = 8;

localparam FILL = 2'd0;
localparam EXEC = 2'd1;
localparam DONE = 2'd2;

parameter HEX_0 = 7'b1000000;		// zero
parameter HEX_1 = 7'b1111001;		// one
parameter HEX_2 = 7'b0100100;		// two
parameter HEX_3 = 7'b0110000;		// three
parameter HEX_4 = 7'b0011001;		// four
parameter HEX_5 = 7'b0010010;		// five
parameter HEX_6 = 7'b0000010;		// six
parameter HEX_7 = 7'b1111000;		// seven
parameter HEX_8 = 7'b0000000;		// eight
parameter HEX_9 = 7'b0011000;		// nine
parameter HEX_10 = 7'b0001000;	// ten
parameter HEX_11 = 7'b0000011;	// eleven
parameter HEX_12 = 7'b1000110;	// twelve
parameter HEX_13 = 7'b0100001;	// thirteen
parameter HEX_14 = 7'b0000110;	// fourteen
parameter HEX_15 = 7'b0001110;	// fifteen
parameter OFF   = 7'b1111111;		// all off

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire 			[31:0]			register_accelerator_out;
wire								err;
reg 			[2:0]				accelerator_leds;
wire rst_ff;

//=======================================================
//  Module instantiation
//======================================================

//=======================================================
//  Structural coding
//=======================================================

assign rst_n = KEY[0];

									
always @(posedge CLOCK_50 or negedge KEY[0]) begin
	if(!KEY[0]) begin
		accelerator_leds <= 3'b000;
	end else if(register_accelerator_out == 32'h0000) begin
		accelerator_leds <= 3'b001;
	end else if(register_accelerator_out == 32'h0001) begin
		accelerator_leds <= 3'b010;
	end

end
									
assign LEDR = {7'h00, accelerator_leds};

proc proc(
    .clk(CLOCK_50), 
	 .rst(!KEY[0]), 
	 .EXT(),
    .register_accelerator_in(32'h0001),
    .register_accelerator_out(register_accelerator_out),
    .err(err)
);

endmodule